// open this file using SLiMgui to start

initialize(){
    // Population size
    defineConstant("N",1000);
    
    // Simulation time
    defineConstant("time",10*N);
    
    // Number of populations
    defineConstant("npop",50);
    
    // Mutation rate    
    defineConstant("u",1e-6); // Mutation rate per genomic element
    initializeMutationRate(u);
    
    // Constants characterizing mutational architecture
    defineConstant("z_mean",rep(0,2)); // Mean mutational effect on each trait
    defineConstant("z_var",diag(rep(1,2))); // Variance of mutationl effect on each trait (trait's robustness); zero covariances
    
    // Constants for selection
    defineConstant("opt",rep(0,2)); // Optimal phenotype
    defineConstant("fitness_width",rep(1,2)); // Width of fitness function (SD of Gaussian function)

    // Number of each type of gene
    initializeMutationType("m1",0.5,"n",0,0.5);m1.convertToSubstitution=F;initializeGenomicElementType("g1",m1,1);
    initializeMutationType("m2",0.5,"n",0,0.5);m2.convertToSubstitution=F;initializeGenomicElementType("g2",m2,1);
    initializeMutationType("m3",0.5,"n",0,0.5);m3.convertToSubstitution=F;initializeGenomicElementType("g3",m3,1);
    
    defineConstant("n_gene_per_trait",50); // Number of genes affecting each trait
    defineConstant("L_upl",0);
    defineConstant("L_npl",n_gene_per_trait-L_upl);
    if(L_upl==n_gene_per_trait){
        initializeGenomicElement(g3,0,n_gene_per_trait-1);
    }else{
        initializeGenomicElement(g1,0,L_npl-1);
        initializeGenomicElement(g2,L_npl,2*L_npl-1);
        if(L_upl>0){
            initializeGenomicElement(g3,2*L_npl,3*L_npl+L_upl-1);
        }
    }
    
    initializeRecombinationRate(0.5); // Free recombination between genes (relative location does not matter)
}

// Create populations
1 late(){
    //sim.addSubpop("p1", N);
    for(i in 0:(npop-1)){
        sim.addSubpop(i,N);
    }
    for(i in 0:(npop-1)){
        for(j in 0:(npop-1)){
            if(i != j){sim.subpopulations[i].setMigrationRates(j,0);} // Set all migration rates as zero such that each population is an independent lineage
        }
    }
}

// Callback (function) for sampling mutation effetcs (called every time a mutation is generated)
mutation(m1){
    effect=rnorm(1,mean=z_mean[0],sd=z_var[0,0]^0.5);
    effects=rep(0.0,2);effects[0]=effect;
    mut.setValue("e1",effect);
    old_effects=sim.getValue("all_effects");
    sim.setValue("all_effects",rbind(old_effects, effects));
    return T;
}
mutation(m2){
    effect=rnorm(1,mean=z_mean[1],sd=z_var[1,1]^0.5);
    effects=rep(0.0,2);effects[1]=effect;
    mut.setValue("e2",effect);
    old_effects=sim.getValue("all_effects");
    sim.setValue("all_effects",rbind(old_effects, effects));
    return T;
}
mutation(m3){
    effects=rmvnorm(1,z_mean,z_var); // Sample effect from a multivariate normal distribution
    mut.setValue("e1",effects[0]);
    mut.setValue("e2",effects[1]);
    old_effects=sim.getValue("all_effects");
    sim.setValue("all_effects",rbind(old_effects, effects));
    return T;
}

// Calculate phenotype given mutation effects
late(){
   for(ind in sim.subpopulations.individuals){ // go through individuals in the population
       muts1=ind.genomes.mutationsOfType(m1);z1=size(muts1)?sum(muts1.getValue("e1")) else 0;
       muts2=ind.genomes.mutationsOfType(m2);z2=size(muts2)?sum(muts2.getValue("e2")) else 0;
       
       muts6=ind.genomes.mutationsOfType(m3);
       z1p=size(muts6)?sum(muts6.getValue("e1")) else 0;z1=z1+z1p;ind.setValue("z1",z1);d1=(z1-opt[0])/fitness_width[0];
       z2p=size(muts6)?sum(muts6.getValue("e2")) else 0;z2=z2+z2p;ind.setValue("z2",z2);d2=(z2-opt[1])/fitness_width[1];
       
       D=(d1^2+d2^2)^0.5;
       ind.fitnessScaling=exp(-D^2/2);
   }
}

// Write temporal patterns
1:late(){
    lines=NULL;
    if(sim.cycle%100==0){ // Write every 100 generations
        for(i in 0:(npop-1)){
            inds=sim.subpopulations[i].individuals;
            z_pop_mean=c(mean(inds.getValue("z1")),mean(inds.getValue("z2")));
            vg=c(var(inds.getValue("z1")),var(inds.getValue("z2")));
            for(j in 1:2){
                outLine=paste0(sim.cycle,"\t",i+1,"\t",j,"\t",z_pop_mean[j-1],"\t",vg[j-1],"\n");
                lines=c(lines,outLine);
            }
        }
        file=paste0(lines);
        cat(file);
    }
}

time late(){
    sim.simulationFinished();
    lines=NULL;
    for(n in 0:(npop-1)){
        inds=sim.subpopulations[n].individuals;
        z_pop_mean=c(mean(inds.getValue("z1")),mean(inds.getValue("z2")));
        vg=c(var(inds.getValue("z1")),var(inds.getValue("z2")));
        for(i in 1:2){
            outLine=paste0(i,"\t",z_pop_mean[i-1],"\t",vg[i-1],"\n");
            lines=c(lines,outLine);
        }
    }
    file=paste0(lines);
    //cat(file);
    filename=paste0("/Users/rexjiang/Desktop/M_Matrix/SLiM_rerun/sim_out_end_2t_",L_upl,"pl.txt");
    writeFile(filename,file);
}